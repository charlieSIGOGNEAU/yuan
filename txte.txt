Ah ! Cette information est cruciale ! Le problème vient de Live Server qui interfère avec les événements. Live Server a un comportement de "hot reload" qui peut causer des rechargements de page non désirés.
Essayons une approche différente en utilisant un serveur web statique simple. Je vais vous proposer d'utiliser Python pour servir la page (Python est généralement préinstallé sur la plupart des systèmes) :
Maintenant, au lieu d'utiliser Live Server, vous pouvez accéder à votre page via :
http://localhost:8000/test.html
Cette approche devrait fonctionner car :
Le serveur Python est un serveur web statique simple
Il ne fait pas de "hot reload" comme Live Server
Il ne modifie pas le comportement des événements JavaScript
Si vous préférez continuer à utiliser Live Server, nous pourrions aussi essayer de désactiver son "hot reload" en ajoutant un fichier de configuration. Voulez-vous que nous essayions cette approche aussi ?
En attendant, testez la page via le serveur Python et dites-moi si tous les boutons fonctionnent correctement maintenant.
ça fonctionne mais est-ce que je pourrais utiliser avec ce nouveau serveur la bibliothèque three,js et les actions dont j'ai oublié le nom qui permettent à railsde m'envoyer une information sans que je lui ai demandé pour changer ma page.

Ah, vous parlez de WebSocket et d'Action Cable (pour Rails) ! Oui, absolument, nous pouvons utiliser Three.js et les WebSockets avec ce serveur Python. En fait, c'est même une meilleure approche car :
Pour Three.js : Il n'y a aucun problème, c'est une bibliothèque JavaScript qui fonctionne côté client, donc elle fonctionnera parfaitement avec n'importe quel serveur web.
Pour les WebSockets : Nous avons deux options :
Continuer à utiliser le serveur Python pour servir les fichiers statiques (HTML, JS, CSS)
Garder votre serveur Rails en cours d'exécution sur le port 3000 pour gérer les WebSockets via Action Cable
Voici comment nous pourrions structurer cela :
Le serveur Python (port 8000) servira :
Votre page HTML
Three.js
Vos fichiers JavaScript
Vos fichiers CSS
Le serveur Rails (port 3000) gérera :
Les WebSockets via Action Cable
Les requêtes API
La communication en temps réel
Voulez-vous que je vous montre comment :
Intégrer Three.js dans votre page actuelle ?
Configurer la connexion WebSocket avec Action Cable ?
Dites-moi par quelle partie vous voulez commencer !

Pour ouvrir un serveur Python, il suffit d'exécuter la commande: 
python3 -m http.server 8000

Tu dois lancer le serveur Rails avec rails s -b 0.0.0.0 -p 3000
